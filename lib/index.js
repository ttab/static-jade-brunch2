// Generated by CoffeeScript 1.6.3
var JadeCompiler, fs, jade, mkdirp, sysPath, writeFile,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

jade = require('jade');

sysPath = require('path');

fs = require('fs');

module.exports = JadeCompiler = (function() {
  JadeCompiler.prototype.brunchPlugin = true;

  JadeCompiler.prototype.type = 'template';

  JadeCompiler.prototype.extension = 'jade';

  JadeCompiler.prototype._dependencyRegExp = /^ *(?:include|extends) (.*)/;

  function JadeCompiler(config) {
    this.config = config;
    this.getDependencies = __bind(this.getDependencies, this);
    return;
  }

  JadeCompiler.prototype.compile = function(data, path, callback) {
    var bit, content, err, error, isClient, output, outputTo, result, _, _ref, _ref1, _ref2;
    isClient = data.indexOf('//- client=true -//') >= 0;
    try {
      content = jade.compile(data, {
        compileDebug: false,
        client: true,
        filename: path,
        path: this.config.paths.app,
        pretty: !!((_ref = this.config.plugins) != null ? (_ref1 = _ref.jade) != null ? _ref1.pretty : void 0 : void 0)
      });
      if (isClient) {
        return result = "module.exports = " + content + ";";
      } else {
        _ref2 = path.match(/.*\/(.*)\.jade/), _ = _ref2[0], bit = _ref2[1];
        outputTo = this.config.paths["public"] + '/' + bit + '.html';
        result = null;
        output = content({});
        return writeFile(outputTo, output, function(err) {
          if (err) {
            return console.error(err);
          }
        });
      }
    } catch (_error) {
      err = _error;
      return error = err;
    } finally {
      callback(error, result);
    }
  };

  JadeCompiler.prototype.include = [sysPath.join(__dirname, '..', 'vendor', 'runtime.js')];

  JadeCompiler.prototype.getDependencies = function(data, path, callback) {
    var dependencies, parent,
      _this = this;
    parent = sysPath.dirname(path);
    dependencies = data.split('\n').map(function(line) {
      return line.match(_this._dependencyRegExp);
    }).filter(function(match) {
      return (match != null ? match.length : void 0) > 0;
    }).map(function(match) {
      return match[1];
    }).filter(function(path) {
      return !!path;
    }).map(function(path) {
      if (sysPath.extname(path) !== ("." + _this.extension)) {
        return path + ("." + _this.extension);
      } else {
        return path;
      }
    }).map(function(path) {
      if (path.charAt(0) === '/') {
        return sysPath.join(_this.config.paths.root, path.slice(1));
      } else {
        return sysPath.join(parent, path);
      }
    });
    return process.nextTick(function() {
      return callback(null, dependencies);
    });
  };

  return JadeCompiler;

})();

mkdirp = function(path) {
  var parent;
  if (path === '.') {
    return;
  }
  parent = sysPath.dirname(path);
  mkdirp(parent);
  return fs.mkdirSync(path, '0755');
};

writeFile = function(path, data, callback) {
  var write;
  write = function(callback) {
    return fs.writeFile(path, data, callback);
  };
  return write(function(error) {
    if (error == null) {
      return callback(null, path, data);
    }
    mkdirp(sysPath.dirname(path));
    return write(function(error) {
      return callback(error, path, data);
    });
  });
};
